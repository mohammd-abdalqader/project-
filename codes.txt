from google.colab import drive
drive.mount('/content/drive')


import pandas as pd

# Load dataset
df = pd.read_csv("/content/drive/MyDrive/final project data .csv")

# Fill missing categorical values with the most frequent value (mode)
categorical_cols = ["gender", "enrolled_university", "education_level", "major_discipline",
                    "company_size", "company_type", "last_new_job"]
for col in categorical_cols:
    df[col] = df[col].fillna(df[col].mode()[0])

# Convert 'experience' to numeric (fix '<1' issue)
df["experience"] = df["experience"].replace("<1", "0").replace(">20", "21")
df["experience"] = pd.to_numeric(df["experience"], errors="coerce")  # Convert to numbers

# Fill missing numerical values with the median
numerical_cols = ["experience","training_hours"]
for col in numerical_cols:
    df[col] = df[col].fillna(df[col].median())

# Save the cleaned dataset
df.to_csv("cleaned_data.csv", index=False)


df.columns
df.describe()
df.info()
df.isna().sum()
df['enrollee_id'] = df['enrollee_id'].astype(str)

df.info()

import matplotlib.pyplot as plt

df.hist(figsize=(12, 8), bins=20)
plt.show()

df['gender'].value_counts().plot(kind='bar')
plt.show()


df['gender'].value_counts().plot(kind='bar')
plt.show()


df['relevent_experience'].value_counts().plot(kind = 'bar')
plt.show()


import matplotlib.pyplot as plt

# Create a 3x2 grid of subplots
fig, axes = plt.subplots(3, 2, figsize=(12, 15))  # 3 rows, 2 columns

# First plot: major_discipline
df['major_discipline'].value_counts().plot(kind='bar', ax=axes[0][0], color='skyblue')
axes[0][0].set_title('Major Discipline Distribution')
axes[0][0].set_xlabel('Major Discipline')
axes[0][0].set_ylabel('Count')

# Second plot: company_size
df['company_size'].value_counts().plot(kind='bar', ax=axes[0][1], color='lightcoral')
axes[0][1].set_title('Company Size Distribution')
axes[0][1].set_xlabel('Company Size')
axes[0][1].set_ylabel('Count')

# Third plot: enrolled_university
df['enrolled_university'].value_counts().plot(kind='bar', ax=axes[1][0], color='lightgreen')
axes[1][0].set_title('Enrolled University Distribution')
axes[1][0].set_xlabel('Enrolled University')
axes[1][0].set_ylabel('Count')

# Fourth plot: education_level
df['education_level'].value_counts().plot(kind='bar', ax=axes[1][1], color='orange')
axes[1][1].set_title('Education Level Distribution')
axes[1][1].set_xlabel('Education Level')
axes[1][1].set_ylabel('Count')

# Fifth plot: gender (pie chart with percentage and explosion)
gender_counts = df['gender'].value_counts()
explode_gender = [0.1] * len(gender_counts)  # Adjust explode to match the number of unique categories
gender_counts.plot(kind='pie', ax=axes[2][0], color='lightblue', autopct='%1.1f%%', explode=explode_gender)
axes[2][0].set_title('Gender Distribution')
axes[2][0].set_ylabel('')  # Remove the 'ylabel' to avoid overlap with the pie chart

# Sixth plot: relevant_experience (pie chart with percentage and explosion)
experience_counts = df['relevent_experience'].value_counts()
explode_experience = [0.1] * len(experience_counts)  # Adjust explode to match the number of unique categories
experience_counts.plot(kind='pie', ax=axes[2][1], color='purple', autopct='%1.1f%%', explode=explode_experience)
axes[2][1].set_title('Relevant Experience Distribution')
axes[2][1].set_ylabel('')  # Remove the 'ylabel' to avoid overlap with the pie chart

# Adjust layout for better spacing
plt.tight_layout()

# Show the plots
plt.show()

df['last_new_job'].value_counts().sort_values().plot(kind='bar', color = 'black')

for col in categorical_cols:
    print(f"Unique values in {col}: {df[col].unique()}")



df['city_development_index'].astype(str)
df.info()

import seaborn as sns
import matplotlib.pyplot as plt

# Choose specific numeric columns (excluding 'city_development_index')
selected_cols = ["experience", "training_hours"]

# Compute correlation matrix for selected columns
corr_matrix = df[selected_cols].corr()

# Plot the heatmap
plt.figure(figsize=(8, 5))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap for Selected Features")
plt.show()



data.isna().sum()

data.describe()
import matplotlib.pyplot as plt

data.hist(figsize=(12, 8), bins=20)
plt.show()

import seaborn as sns
import matplotlib.pyplot as plt
selected_cols = ["Interest_Rate", "Inflation","GDP","Unemployment","Ind_Prod","sp500"]


corr_matrix=data[selected_cols].corr()
# Plot the heatmap
plt.figure(figsize=(8, 5))
sns.heatmap(corr_matrix, annot=True, cmap="coolwarm", fmt=".2f")
plt.title("Correlation Heatmap for Selected Features")
plt.show()


red =data['InterestRate'].mean()

import pandas as pd
def p(v):
    if v > 4.6993489148580965:
        return 'background-color: red'
    else:
        return 'background-color: green'

data_1 = data.style.applymap(p, subset=['InterestRate'])
data_1


def p(m):
    if m > 6.1654424040066775:
        return 'background-color: red'
    else:
        return 'background-color: green'

data_2 = data.style.applymap(p, subset=['Unemployment'])
data_2


import pandas as pd
import statsmodels.api as sm
import statsmodels.formula.api as smf
from scipy.stats import pearsonr, ttest_ind
from statsmodels.tsa.stattools import adfuller


# Hypothesis Testing: Relationship between Unemployment and GDP
corr, p_value = pearsonr(data["Unemployment"], data["GDP"])
print(f"Pearson Correlation: {corr:.3f}, p-value: {p_value:.3e}")

# Independent T-test: Comparing GDP for High vs Low Unemployment Periods
mean_unemployment = data["Unemployment"].mean()
low_unemp_gdp = data[data["Unemployment"] <   mean_unemployment]["GDP"]
high_unemp_gdp = data[data["Unemployment"] >= mean_unemployment]["GDP"]

t_stat, t_p_value = ttest_ind(low_unemp_gdp, high_unemp_gdp, equal_var=False)
print(f"T-test Statistic: {t_stat:.3f}, p-value: {t_p_value:.3e}")

# Stationarity Test (ADF Test)
def adf_test(series, name):
    result = adfuller(series.dropna())
    print(f"ADF Test for {name}:")
    print(f"  ADF Statistic: {result[0]:.3f}")
    print(f"  p-value: {result[1]:.3e}")
    print(f"  Conclusion: {'Stationary' if result[1] < 0.05 else 'Non-Stationary'}\n")

adf_test(data["GDP"], "GDP")
adf_test(data["Unemployment"], "Unemployment")

# Regression Model: Predicting GDP using Unemployment
model = smf.ols("GDP ~ Unemployment", data=data).fit()
print(model.summary())


import pandas as pd
import matplotlib.pyplot as plt
import statsmodels.api as sm
from statsmodels.tsa.stattools import adfuller, acf, pacf
from statsmodels.tsa.arima.model import ARIMA


# Convert 'Date' column to datetime format (if not already in datetime format)
data["Date"] = pd.to_datetime(data["date"])  # Replace 'Date' with your actual date column name
data.set_index("Date", inplace=True)

# Plot GDP & Unemployment Trends
plt.figure(figsize=(12, 6))
plt.subplot(2, 1, 1)
plt.plot(data["GDP"], label="GDP", color="blue")
plt.title("GDP Over Time")
plt.legend()

plt.subplot(2, 1, 2)
plt.plot(data["Unemployment"], label="Unemployment", color="red")
plt.title("Unemployment Over Time")
plt.legend()

plt.tight_layout()
plt.show()

# Differencing to Make GDP Stationary
data["GDP_diff"] = data["GDP"].diff().dropna()

# ADF Test on Differenced GDP
result = adfuller(data["GDP_diff"].dropna())
print(f"ADF Statistic (After Differencing): {result[0]:.3f}")
print(f"p-value: {result[1]:.3e}")
print(f"Conclusion: {'Stationary' if result[1] < 0.05 else 'Non-Stationary'}")

# Autocorrelation & Partial Autocorrelation
fig, axes = plt.subplots(1, 2, figsize=(12, 4))
sm.graphics.tsa.plot_acf(data["GDP_diff"].dropna(), lags=20, ax=axes[0])
sm.graphics.tsa.plot_pacf(data["GDP_diff"].dropna(), lags=20, ax=axes[1])
plt.show()

# ARIMA Model for Forecasting GDP
model = ARIMA(data["GDP"], order=(1,1,1))  # (p,d,q) - Adjust if needed
model_fit = model.fit()
print(model_fit.summary())

# Forecast Next 12 Months
forecast = model_fit.forecast(steps=12)
plt.figure(figsize=(10,5))
plt.plot(data.index, data["GDP"], label="Actual GDP")
plt.plot(pd.date_range(start=data.index[-1], periods=12, freq="M"), forecast, label="Forecasted GDP", linestyle="dashed", color="red")
plt.legend()
plt.title("GDP Forecast")
plt.show()

